// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LocalizerServiceClient is the client API for LocalizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalizerServiceClient interface {
	ExposeService(ctx context.Context, in *ExposeServiceRequest, opts ...grpc.CallOption) (LocalizerService_ExposeServiceClient, error)
	StopExpose(ctx context.Context, in *StopExposeRequest, opts ...grpc.CallOption) (LocalizerService_StopExposeClient, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type localizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalizerServiceClient(cc grpc.ClientConnInterface) LocalizerServiceClient {
	return &localizerServiceClient{cc}
}

func (c *localizerServiceClient) ExposeService(ctx context.Context, in *ExposeServiceRequest, opts ...grpc.CallOption) (LocalizerService_ExposeServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalizerService_serviceDesc.Streams[0], "/api.v1.LocalizerService/ExposeService", opts...)
	if err != nil {
		return nil, err
	}
	x := &localizerServiceExposeServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalizerService_ExposeServiceClient interface {
	Recv() (*ConsoleResponse, error)
	grpc.ClientStream
}

type localizerServiceExposeServiceClient struct {
	grpc.ClientStream
}

func (x *localizerServiceExposeServiceClient) Recv() (*ConsoleResponse, error) {
	m := new(ConsoleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localizerServiceClient) StopExpose(ctx context.Context, in *StopExposeRequest, opts ...grpc.CallOption) (LocalizerService_StopExposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalizerService_serviceDesc.Streams[1], "/api.v1.LocalizerService/StopExpose", opts...)
	if err != nil {
		return nil, err
	}
	x := &localizerServiceStopExposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalizerService_StopExposeClient interface {
	Recv() (*ConsoleResponse, error)
	grpc.ClientStream
}

type localizerServiceStopExposeClient struct {
	grpc.ClientStream
}

func (x *localizerServiceStopExposeClient) Recv() (*ConsoleResponse, error) {
	m := new(ConsoleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localizerServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.v1.LocalizerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/api.v1.LocalizerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalizerServiceServer is the server API for LocalizerService service.
// All implementations must embed UnimplementedLocalizerServiceServer
// for forward compatibility
type LocalizerServiceServer interface {
	ExposeService(*ExposeServiceRequest, LocalizerService_ExposeServiceServer) error
	StopExpose(*StopExposeRequest, LocalizerService_StopExposeServer) error
	List(context.Context, *ListRequest) (*ListResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedLocalizerServiceServer()
}

// UnimplementedLocalizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocalizerServiceServer struct {
}

func (UnimplementedLocalizerServiceServer) ExposeService(*ExposeServiceRequest, LocalizerService_ExposeServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ExposeService not implemented")
}
func (UnimplementedLocalizerServiceServer) StopExpose(*StopExposeRequest, LocalizerService_StopExposeServer) error {
	return status.Errorf(codes.Unimplemented, "method StopExpose not implemented")
}
func (UnimplementedLocalizerServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLocalizerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLocalizerServiceServer) mustEmbedUnimplementedLocalizerServiceServer() {}

// UnsafeLocalizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalizerServiceServer will
// result in compilation errors.
type UnsafeLocalizerServiceServer interface {
	mustEmbedUnimplementedLocalizerServiceServer()
}

func RegisterLocalizerServiceServer(s grpc.ServiceRegistrar, srv LocalizerServiceServer) {
	s.RegisterService(&_LocalizerService_serviceDesc, srv)
}

func _LocalizerService_ExposeService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExposeServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalizerServiceServer).ExposeService(m, &localizerServiceExposeServiceServer{stream})
}

type LocalizerService_ExposeServiceServer interface {
	Send(*ConsoleResponse) error
	grpc.ServerStream
}

type localizerServiceExposeServiceServer struct {
	grpc.ServerStream
}

func (x *localizerServiceExposeServiceServer) Send(m *ConsoleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalizerService_StopExpose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StopExposeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalizerServiceServer).StopExpose(m, &localizerServiceStopExposeServer{stream})
}

type LocalizerService_StopExposeServer interface {
	Send(*ConsoleResponse) error
	grpc.ServerStream
}

type localizerServiceStopExposeServer struct {
	grpc.ServerStream
}

func (x *localizerServiceStopExposeServer) Send(m *ConsoleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalizerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LocalizerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizerServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LocalizerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalizerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.LocalizerService",
	HandlerType: (*LocalizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _LocalizerService_List_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _LocalizerService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExposeService",
			Handler:       _LocalizerService_ExposeService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StopExpose",
			Handler:       _LocalizerService_StopExpose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1.proto",
}
